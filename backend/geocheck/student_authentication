import boto3
import json

# Initialize AWS clients
s3 = boto3.client('s3')
rekognition = boto3.client('rekognition', region_name='us-east-1')
dynamodb = boto3.resource('dynamodb', region_name='us-east-1')

# DynamoDB table reference
dynamodbTableName = 'student'
studentTable = dynamodb.Table(dynamodbTableName)

# S3 bucket name
bucketName = 'jimmeister-visitor-image-storage'

def lambda_handler(event, context):
    print(event)  # Log the incoming event for debugging

    # Extract the object key from the query string parameters
    objectKey = event['queryStringParameters']['objectKey']

    # Retrieve the image bytes from the S3 bucket
    image_bytes = s3.get_object(Bucket=bucketName, Key=objectKey)['Body'].read()

    # Perform a search for matching faces in the Rekognition collection
    response = rekognition.search_faces_by_image(
        CollectionId="students",
        Image={'Bytes': image_bytes}
    )

    # Iterate through the matches found by Rekognition
    for match in response['FaceMatches']:
        print(match['Face']['FaceId'], match['Face']['Confidence'])  # Log the match details

        # Retrieve the corresponding student record from DynamoDB
        face = studentTable.get_item(
            Key={
                'rekognitionId': match['Face']['FaceId']
            }
        )

        # If the face is found in DynamoDB, perform further processing
        if 'Item' in face:
            # If a person is found in the DynamoDB table
            print('Person Found: ', face['Item'])
            return buildResponse(200, {
                'Message': 'Success',
                'firstName': face['Item']['FirstName'],
                'lastName': face['Item']['LastName']
            })

        # If a person could not be found
        print('Person could not be recognized.')
        return buildResponse(403, {'Message': 'Person Not Found'})

# Helper function to build API Gateway responses
def buildResponse(statusCode, body=None):
    response = {
        'statusCode': statusCode,
        'headers': {
            'Content-Type': 'application/json',
        }
    }

    if body is not None:
        response['body'] = json.dumps(body)

    return response

